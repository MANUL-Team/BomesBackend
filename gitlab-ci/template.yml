stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy-dev

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

# Шаблон сборки образа 
.deploy-template:
  stage: deploy-dev
  rules:
      when: always
  script:
    - gunzip *.tar.gz
    - docker load -i *.tar
    - docker run -dit --name $DOCKERNAME $SPECIFIC_SETTINGS_DOCKER --net docker_bomes --ip $IP $DOCKERNAME
    - echo "Compile complete."

.build-template-servises:
  stage: build
  rules:
    # Если есть изменения, то собираем соответствующий микросервис
    - changes:
        paths:
          - gitlab-ci/**/*
          - Services/$PROJECT/**/*
      if: '$RUN_SPECIFIC_JOB == "dev"'
      when: always
    - when: always
    # В иных случаях оставляем как manual, чтобы разработчик мог запустить по своему желанию
  parallel: 2
  tags: 
    - DevBomes${CI_NODE_INDEX}
  script:
    - echo "Deleting oldest container and image..."
    - docker stop $DOCKERNAME || echo "$DOCKERNAME is stoped"
    - docker rm $DOCKERNAME || echo "$DOCKERNAME is removed"
    - echo "Deleting oldest image $DOCKERNAME"
    - docker rmi $DOCKERNAME || echo "$DOCKERNAME image is removed"
    - cd Services/$PROJECT
    - docker build -t $DOCKERNAME .
    - docker save $DOCKERNAME | gzip > $DOCKERNAME.tar.gz
  artifacts:
    name: "$DOCKERNAME"
    paths:
      - $DOCKERNAME.tar.gz
    expire_in: 1 week

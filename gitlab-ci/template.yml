stages:          # List of stages for jobs, and their order of execution
  - build-api
  - build
  - production-api
  - production

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

# Шаблон сборки образа 
.build-template-api:
  stage: build-api
  rules:
    # Если есть изменения, то собираем соответствующий микросервис
    - changes:
        paths:
          - gitlab-ci/**/*
          - Services/$PROJECT/**/*
      if: '$RUN_SPECIFIC_JOB == "dev-api"'
      if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
    - if: '$RUN_SPECIFIC_JOB == "dev-api"'
      if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
    - when: never
    # В иных случаях оставляем как manual, чтобы разработчик мог запустить по своему желанию
  parallel: 2
  tags: 
    - DevBomes${CI_NODE_INDEX}
  script:
    - echo "Deleting oldest container and image..."
    - docker stop $DOCKERNAME || echo "$DOCKERNAME is stoped"
    - docker rm $DOCKERNAME || echo "$DOCKERNAME is removed"
    - echo "Deleting oldest image $DOCKERNAME"
    - docker rmi $DOCKERNAME || echo "$DOCKERNAME image is removed"
    - cd Services/$PROJECT
    - mv index_dev.js index.js
    - mv .env_dev .env
    - docker build -t $DOCKERNAME .
    - docker run -dit --name $DOCKERNAME -p 8000:8000 --net docker_bomes --ip $IP $DOCKERNAME
    - echo "Compile complete."

.build-template-servises:
  stage: build
  rules:
    # Если есть изменения, то собираем соответствующий микросервис
    - changes:
        paths:
          - gitlab-ci/**/*
          - Services/$PROJECT/**/*
      if: '$RUN_SPECIFIC_JOB == "dev"'
      if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
    - if: '$RUN_SPECIFIC_JOB == "dev"'
      if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
    - when: never
    # В иных случаях оставляем как manual, чтобы разработчик мог запустить по своему желанию
  parallel: 2
  tags: 
    - DevBomes${CI_NODE_INDEX}
  script:
    - echo "Deleting oldest container and image..."
    - docker stop $DOCKERNAME || echo "$DOCKERNAME is stoped"
    - docker rm $DOCKERNAME || echo "$DOCKERNAME is removed"
    - echo "Deleting oldest image $DOCKERNAME"
    - docker rmi $DOCKERNAME || echo "$DOCKERNAME image is removed"
    - cd Services/$PROJECT
    - sed 's/wss/ws/' .env -i
    - docker build -t $DOCKERNAME .
    - docker run -dit --name $DOCKERNAME --net docker_bomes --ip $IP $DOCKERNAME
    - echo "Compile complete."

.production-template-api:
  stage: production
  rules:
    - if: '$RUN_SPECIFIC_JOB == "prod-api"'
      if: '$CI_COMMIT_BRANCH == "release"'
      when: manual
    - when: never
  tags: [production]
  script:
    - echo "Deleting oldest container and image..."
    - docker stop $DOCKERNAME || echo "$DOCKERNAME is stoped"
    - docker rm $DOCKERNAME || echo "$DOCKERNAME is removed"
    - echo "Deleting oldest image $DOCKERNAME"
    - docker rmi $DOCKERNAME || echo "$DOCKERNAME image is removed"
    - cd Services/$PROJECT
    - mv index_prod.js index.js
    - mv .env_prod .env
    - docker build -t $DOCKERNAME .
    - docker run -dit --name $DOCKERNAME -p 8000:8000 --net docker_bomes --ip $IP $DOCKERNAME
    - echo "Compile complete."

.production-template-servises:
  stage: production
  rules:
    - if: '$RUN_SPECIFIC_JOB == "prod"'
      if: '$CI_COMMIT_BRANCH == "release"'
      when: manual
    - when: never
  tags: [production]
  script:
    - echo "Deleting oldest container and image..."
    - docker stop $DOCKERNAME || echo "$DOCKERNAME is stoped"
    - docker rm $DOCKERNAME || echo "$DOCKERNAME is removed"
    - echo "Deleting oldest image $DOCKERNAME"
    - docker rmi $DOCKERNAME || echo "$DOCKERNAME image is removed"
    - cd Services/$PROJECT
    - docker build -t $DOCKERNAME .
    - docker run -dit --name $DOCKERNAME --net docker_bomes --ip $IP $DOCKERNAME
    - echo "Compile complete."
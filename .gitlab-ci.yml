# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - dev-api
  - dev
  - production-api
  - production

workflow:
  rules:
    # Пайплайн в контексте MR
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Если контекст коммита, но есть открытый MR, то НЕ запускаемся
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    # Одинокий коммит ИЛИ тэг
    - if: '$CI_COMMIT_BRANCH || $CI_COMMIT_TAG'

variables:
  PARENT_PIPELINE_SOURCE: "$CI_PIPELINE_SOURCE"
  PARENT_LABELS: "$CI_MERGE_REQUEST_LABELS"

.trigger_api:
  trigger: &trigger_api
    # Автомагически подбираем нужный файл
    include:
      - local: Services/$PROJECT/.gitlab-ci.yml
    # Родительский пайплайн ждет выполнения всех дочерних
    strategy: depend
    # Передаем переменные в дочерние пайплайны
    forward:
      # Переменные CI, например, секреты
      pipeline_variables: true
      # Переменные из глобального блока variables
      yaml_variables: true
 changes:
    paths:
      - gitlab-ci/**/*
      - Services/$PROJECT/**/*
  when: always

.trigger:
  trigger:
    # Автомагически подбираем нужный файл
    <<: *trigger_api
  changes:
    paths:
      - gitlab-ci/**/*
      - Services/$PROJECT/**/*
  when: always
  needs: BomesAPI_dev
  when: always
  needs: BomesAPI_prod
  when: always

BomesAPI_dev: &BomesAPI_dev
  stage: dev-api
  extends: .trigger_api
  variables:
    PROJECT: "BomesAPI"
    RUN_SPECIFIC_JOB: "dev-api"

BomesAPI_prod:
  <<: *BomesAPI_dev
  stage: production-api
  variables:
    PROJECT: "BomesAPI"
    RUN_SPECIFIC_JOB: "prod-api"

BomesAuthentificationService_dev: &BomesAuthentificationService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesAuthentificationService"
    RUN_SPECIFIC_JOB: "dev"

BomesAuthentificationService_prod:
  <<: *BomesAuthentificationService_dev
  stage: production
  variables:
    PROJECT: "BomesAuthentificationService"
    RUN_SPECIFIC_JOB: "prod"

BomesChatControlsService_dev: &BomesChatControlsService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesChatControlsService"
    RUN_SPECIFIC_JOB: "dev"

BomesChatControlsService_prod:
  <<: *BomesChatControlsService_dev
  stage: production
  variables:
    PROJECT: "BomesChatControlsService"
    RUN_SPECIFIC_JOB: "prod"

BomesFriendsService_dev: &BomesFriendsService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesFriendsService"
    RUN_SPECIFIC_JOB: "dev"

BomesFriendsService_prod:
  <<: *BomesFriendsService_dev
  stage: production
  variables:
    PROJECT: "BomesFriendsService"
    RUN_SPECIFIC_JOB: "prod"

BomesGettingDataService_dev: &BomesGettingDataService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesGettingDataService"
    RUN_SPECIFIC_JOB: "dev"

BomesGettingDataService_prod:
  <<: *BomesGettingDataService_dev
  stage: production
  variables:
    PROJECT: "BomesGettingDataService"
    RUN_SPECIFIC_JOB: "prod"

BomesMailService_dev: &BomesMailService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesMailService"
    RUN_SPECIFIC_JOB: "dev"

BomesMailService_prod:
  <<: *BomesMailService_dev
  stage: production
  variables:
    PROJECT: "BomesMailService"
    RUN_SPECIFIC_JOB: "prod"

BomesMessagingService_dev: &BomesMessagingService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesMessagingService"
    RUN_SPECIFIC_JOB: "dev"

BomesMessagingService_prod:
  <<: *BomesMessagingService_dev
  stage: production
  variables:
    PROJECT: "BomesMessagingService"
    RUN_SPECIFIC_JOB: "prod"

BomesMonitoringService_dev: &BomesMonitoringService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesMonitoringService"
    RUN_SPECIFIC_JOB: "dev"

BomesMonitoringService_prod:
  <<: *BomesMonitoringService_dev
  stage: production
  variables:
    PROJECT: "BomesMonitoringService"
    RUN_SPECIFIC_JOB: "prod"

BomesNotificationService_dev: &BomesNotificationService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesNotificationService"
    RUN_SPECIFIC_JOB: "dev"

BomesNotificationService_prod:
  <<: *BomesNotificationService_dev
  stage: production
  variables:
    PROJECT: "BomesNotificationService"
    RUN_SPECIFIC_JOB: "prod"

BomesUserControlsService_dev: &BomesUserControlsService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesUserControlsService"
    RUN_SPECIFIC_JOB: "dev"

BomesUserControlsService_prod:
  <<: *BomesUserControlsService_dev
  stage: production
  variables:
    PROJECT: "BomesUserControlsService"
    RUN_SPECIFIC_JOB: "prod"

BomesUserDataService_dev: &BomesUserDataService_dev
  stage: dev
  extends: .trigger
  variables:
    PROJECT: "BomesUserDataService"
    RUN_SPECIFIC_JOB: "dev"

BomesUserDataService_prod:
  <<: *BomesUserDataService_dev
  stage: production
  variables:
    PROJECT: "BomesUserDataService"
    RUN_SPECIFIC_JOB: "prod"